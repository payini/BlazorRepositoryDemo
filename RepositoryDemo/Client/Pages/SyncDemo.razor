@page "/syncdemo"
@implements IDisposable
@inject CustomerIndexedDBSyncRepository CustomerManager

<h1>Offline Repository Sync Demo</h1>

<div style="background-color:lightgray;padding:20px;">
    This demo:
    <ul>
        <li>Downloads all data from server when first run online, and saves to IndexedDB</li>
        <li>Keeps IndexedDB in sync with online source as you make changes</li>
        <li>Keeps a list map of items with both local and online primary keys</li>
        <li>When offline, keeps a list of transactions (insert, update, and delete)</li>
        <li>When you go back online, it executes those transactions</li>
    </ul>
    What it does NOT do (yet):
    <ul>
        <li>Check for collisions and deal with the consequences</li>
        <li>Efficiently sync local db from online source when you go back online after syncing</li>
    </ul>
</div>
<br/>
@foreach (var customer in Customers)
{
            <p>(@customer.Id) @customer.Name, @customer.Email</p>
}

<button @onclick="AddCustomer">Add Customer</button>
<button @onclick="UpdateIsadora">Update Isadora</button>
<button @onclick="DeleteRocky">Delete Rocky</button>
<button @onclick="DeleteHugh">Delete Hugh</button>
<button @onclick="GetJenny">GetJenny</button>
<button @onclick="ResetData">Reset Data</button>
<br />
<br />
<p>
    Search by Name: <input @bind=@SearchFilter />
    <button @onclick="Search">Search</button>
    <br />
    <br />
    <input style="zoom:1.5;" type="checkbox" @bind="CaseSensitive" /> Case Sensitive
    <br />
    <input style="zoom:1.5;" type="checkbox" @bind="Descending" /> Descending Order
    <br />
    <br />
    Options:<br />
    <select @onchange="SelectedOptionChanged" size=3 style="padding:10px;">
        <option selected value="StartsWith">Starts With</option>
        <option value="EndsWith">Ends With</option>
        <option value="Contains">Contains</option>
    </select>

</p>

<br />
<br />
<p>@JennyMessage</p>


@code
{
    List<Customer> Customers = new List<Customer>();
    string JennyMessage = "";
    string SearchFilter = "";
    bool CaseSensitive = false;
    bool Descending = false;
    FilterOperator filterOption = FilterOperator.StartsWith;

    bool Initialized = false;

    void SelectedOptionChanged(ChangeEventArgs args)
    {
        switch (args.Value.ToString())
        {
            case "StartsWith":
                filterOption = FilterOperator.StartsWith;
                break;
            case "EndsWith":
                filterOption = FilterOperator.EndsWith;
                break;
            case "Contains":
                filterOption = FilterOperator.Contains;
                break;
        }
    }

    async Task Search()
    {
        try
        {
            var expression = new QueryFilter<Customer>();

            expression.FilterProperties.Add(new FilterProperty { Name = "Name", Value = SearchFilter, Operator = filterOption, CaseSensitive = CaseSensitive });
            expression.OrderByPropertyName = "Name";
            expression.OrderByDescending = Descending;

            //// Example, return where Id = 2
            //expression.FilterProperties.Add(new FilterProperty { Name = "Id", Value = "2", Operator = FilterOperator.Equals });
            //expression.OrderByPropertyName = "Name";
            //expression.OrderByDescending = Descending;

            //// Example, return where Id > 1
            //expression.FilterProperties.Add(new FilterProperty { Name = "Id", Value = "1", Operator = FilterOperator.GreaterThan });
            //expression.OrderByPropertyName = "Name";
            //expression.OrderByDescending = Descending;


            var list = await CustomerManager.GetAsync(expression);
            Customers = list.ToList();

        }
        catch (Exception ex)
        {
            var msg = ex.Message;
        }
    }

    async Task DeleteRocky()
    {
        var rocky = (from x in Customers
                     where x.Email == "rocky@rhodes.com"
                     select x).FirstOrDefault();
        if (rocky != null)
        {
            var index = Customers.IndexOf(rocky);
            await CustomerManager.DeleteAsync(rocky);
            Customers.RemoveAt(index);
        }
    }

    async Task DeleteHugh()
    {
        var hugh = (from x in Customers
                    where x.Email == "hugh@jass.com"
                    select x).FirstOrDefault();
        if (hugh != null)
        {
            var index = Customers.IndexOf(hugh);
            await CustomerManager.DeleteByIdAsync(hugh.Id);
            Customers.RemoveAt(index);
        }
    }

    async Task AddCustomer()
    {
        var customer = new Customer
            {
                Name = "New Customer",
                Email = "new@customer.com"
            };
        customer = await CustomerManager.InsertAsync(customer);
        Customers.Add(customer);
    }

    async Task UpdateIsadora()
    {
        var isadora = (from x in Customers
                       where x.Email == "isadora@jarr.com"
                       select x).FirstOrDefault();
        if (isadora != null)
        {
            isadora.Email = "isadora@isadorajarr.com";
            await CustomerManager.UpdateAsync(isadora);
        }
    }

    async Task GetJenny()
    {
        JennyMessage = "";
        var jenny = (from x in Customers
                     where x.Email == "jenny@jones.com"
                     select x).FirstOrDefault();
        if (jenny != null)
        {
            var jennyDb = await CustomerManager.GetByIdAsync(jenny.Id);
            if (jennyDb != null)
            {
                JennyMessage = $"Retrieved Jenny via Id {jennyDb.Id}";
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    protected async void OnlineStatusChanged(object sender, OnlineStatusEventArgs args)
    {
        if (args.IsOnline == false)
        {
            // reload from IndexedDB
            Customers = (await CustomerManager.GetAllOfflineAsync()).ToList();
        }
        else
        {
            if (Initialized)
                // reload from API
                await Reload();
            else
                Initialized = true;
        }
        await InvokeAsync(StateHasChanged);
    }

    protected async void OnDataChanged(object sender, DataChangedEventArgs args)
    {
        // We only care about changes to the Customer table
        if (args.Table == "Customer")
        {
            if (args.Action == "delete-all")
            {
                // delete all?? How rude!
                Customers.Clear();
            }
            else if (args.Action == "insert")
            {
                // an item was added. 
                var customer = await CustomerManager.GetByIdAsync(args.Id);
                Customers.Add(customer);
                // add to 
            }
            else if (args.Action == "update")
            {
                // an item was updated
                var customer = await CustomerManager.GetByIdAsync(args.Id);
                if (customer != null)
                {
                    var localCustomer = (from x in Customers where x.Id == customer.Id select x).FirstOrDefault();
                    if (localCustomer != null)
                    {
                        var index = Customers.IndexOf(localCustomer);
                        Customers[index] = customer;
                    }
                }
            }
            else if (args.Action == "delete")
            {
                var localCustomer = (from x in Customers where x.Id.ToString() == args.Id select x).FirstOrDefault();
                if (localCustomer != null)
                {
                    var index = Customers.IndexOf(localCustomer);
                    Customers.RemoveAt(index);
                }
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        CustomerManager.OnlineStatusChanged += OnlineStatusChanged;
        CustomerManager.DataChanged += OnDataChanged;
        await AddCustomers();
    }

    async Task ResetData()
    {
        await CustomerManager.DeleteAllAsync();
        await AddCustomers();
    }

    async Task Reload()
    {
        JennyMessage = "";
        var list = await CustomerManager.GetAllAsync();
        if (list != null)
        {
            Customers = list.ToList();
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task AddCustomers()
    {
        // Added these lines to not clobber the existing data
        var all = await CustomerManager.GetAllAsync();
        if (all.Count() > 0)
        {
            await Reload();
            return;
        }

        Customers.Clear();

        await CustomerManager.InsertAsync(new Customer
            {
                Id = 1,
                Name = "Isadora Jarr",
                Email = "isadora@jarr.com"
            });

        await CustomerManager.InsertAsync(new Customer
            {
                Id = 2,
                Name = "Rocky Rhodes",
                Email = "rocky@rhodes.com"
            });

        await CustomerManager.InsertAsync(new Customer
            {
                Id = 3,
                Name = "Jenny Jones",
                Email = "jenny@jones.com"
            });

        await CustomerManager.InsertAsync(new Customer
            {
                Id = 4,
                Name = "Hugh Jass",
                Email = "hugh@jass.com"
            });

        await Reload();
    }

    void IDisposable.Dispose()
    {
        CustomerManager.OnlineStatusChanged -= OnlineStatusChanged;
    }
}